{"resolvedId":"D:/Files/Github/thaler/examples/solidstart/src/components/Example.tsx","transforms":[{"name":"__load__","result":"import { createResource, createSignal, Suspense } from 'solid-js';\nimport { fn$ } from 'thaler';\nimport { debounce } from 'thaler/utils';\n\nconst sleep = (ms: number) => new Promise((res) => {\n  setTimeout(res, ms, true);\n});\n\nexport default function Example() {\n  const [state, setState] = createSignal(0);\n\n  const prefix = 'Server Count';\n\n  const serverCount = debounce(fn$(async (value: number) => {\n    await sleep(1000);\n    console.log('Received', value);\n    return `${prefix}: ${value}`;\n  }), {\n    key: () => 'sleep',\n  });\n  const [data] = createResource(state, (value) => serverCount(value));\n\n  function increment() {\n    setState((c) => c + 1);\n  }\n\n  return (\n    <>\n      <button onClick={increment}>\n        {`Client Count: ${state()}`}\n      </button>\n      <div>\n        <Suspense fallback={<h1>Loading</h1>}>\n          <h1>{data()}</h1>\n        </Suspense>\n      </div>\n    </>\n  );\n}\n","start":1681089272935,"end":1681089272935},{"name":"solid","result":"import { template as _$template } from \"solid-js/web\";\nimport { delegateEvents as _$delegateEvents } from \"solid-js/web\";\nimport { createComponent as _$createComponent } from \"solid-js/web\";\nimport { getNextElement as _$getNextElement } from \"solid-js/web\";\nimport { runHydrationEvents as _$runHydrationEvents } from \"solid-js/web\";\nimport { insert as _$insert } from \"solid-js/web\";\nimport { $$component as _$$component } from \"solid-refresh\";\nimport { $$refresh as _$$refresh } from \"solid-refresh\";\nimport { $$registry as _$$registry } from \"solid-refresh\";\nconst _REGISTRY = _$$registry();\nconst _tmpl$ = /*#__PURE__*/_$template(`<button>`),\n  _tmpl$2 = /*#__PURE__*/_$template(`<h1>`),\n  _tmpl$3 = /*#__PURE__*/_$template(`<div>`),\n  _tmpl$4 = /*#__PURE__*/_$template(`<h1>Loading`);\nimport { createResource, createSignal, Suspense } from 'solid-js';\nimport { fn$ } from 'thaler';\nimport { debounce } from 'thaler/utils';\nconst sleep = ms => new Promise(res => {\n  setTimeout(res, ms, true);\n});\nexport default _$$component(_REGISTRY, \"Example\", function Example() {\n  const [state, setState] = createSignal(0);\n  const prefix = 'Server Count';\n  const serverCount = debounce(fn$(async value => {\n    await sleep(1000);\n    console.log('Received', value);\n    return `${prefix}: ${value}`;\n  }), {\n    key: () => 'sleep'\n  });\n  const [data] = createResource(state, value => serverCount(value));\n  function increment() {\n    setState(c => c + 1);\n  }\n  return [(() => {\n    const _el$ = _$getNextElement(_tmpl$);\n    _el$.$$click = increment;\n    _$insert(_el$, () => `Client Count: ${state()}`);\n    _$runHydrationEvents();\n    return _el$;\n  })(), (() => {\n    const _el$2 = _$getNextElement(_tmpl$3);\n    _$insert(_el$2, _$createComponent(Suspense, {\n      get fallback() {\n        return _$getNextElement(_tmpl$4);\n      },\n      get children() {\n        const _el$3 = _$getNextElement(_tmpl$2);\n        _$insert(_el$3, data);\n        return _el$3;\n      }\n    }));\n    return _el$2;\n  })()];\n}, {\n  location: \"src\\\\components\\\\Example.tsx:9:15\"\n});\nif (import.meta.hot) {\n  _$$refresh(\"vite\", import.meta.hot, _REGISTRY);\n  import.meta.hot.accept();\n}\n_$delegateEvents([\"click\"]);","start":1681089272935,"end":1681089272945,"order":"pre"},{"name":"thaler","result":"import { $$clone as _$$clone } from \"thaler/client\";\nimport { $$register as _$$register } from \"thaler/client\";\nimport { template as _$template } from \"solid-js/web\";\nimport { delegateEvents as _$delegateEvents } from \"solid-js/web\";\nimport { createComponent as _$createComponent } from \"solid-js/web\";\nimport { getNextElement as _$getNextElement } from \"solid-js/web\";\nimport { runHydrationEvents as _$runHydrationEvents } from \"solid-js/web\";\nimport { insert as _$insert } from \"solid-js/web\";\nimport { $$component as _$$component } from \"solid-refresh\";\nimport { $$refresh as _$$refresh } from \"solid-refresh\";\nimport { $$registry as _$$registry } from \"solid-refresh\";\nconst _REGISTRY = _$$registry();\nconst _tmpl$ = /*#__PURE__*/_$template(`<button>`),\n  _tmpl$2 = /*#__PURE__*/_$template(`<h1>`),\n  _tmpl$3 = /*#__PURE__*/_$template(`<div>`),\n  _tmpl$4 = /*#__PURE__*/_$template(`<h1>Loading`);\nimport { createResource, createSignal, Suspense } from 'solid-js';\nimport { fn$ } from 'thaler';\nimport { debounce } from 'thaler/utils';\nconst sleep = ms => new Promise(res => {\n  setTimeout(res, ms, true);\n});\nconst _fn = _$$register(\"fn\", \"http://localhost:5173/api/__thaler/11d62f5d-0\");\nexport default _$$component(_REGISTRY, \"Example\", function Example() {\n  const [state, setState] = createSignal(0);\n  const prefix = 'Server Count';\n  const serverCount = debounce(_$$clone(_fn, () => [prefix]), {\n    key: () => 'sleep'\n  });\n  const [data] = createResource(state, value => serverCount(value));\n  function increment() {\n    setState(c => c + 1);\n  }\n  return [(() => {\n    const _el$ = _$getNextElement(_tmpl$);\n    _el$.$$click = increment;\n    _$insert(_el$, () => `Client Count: ${state()}`);\n    _$runHydrationEvents();\n    return _el$;\n  })(), (() => {\n    const _el$2 = _$getNextElement(_tmpl$3);\n    _$insert(_el$2, _$createComponent(Suspense, {\n      get fallback() {\n        return _$getNextElement(_tmpl$4);\n      },\n      get children() {\n        const _el$3 = _$getNextElement(_tmpl$2);\n        _$insert(_el$3, data);\n        return _el$3;\n      }\n    }));\n    return _el$2;\n  })()];\n}, {\n  location: \"src\\\\components\\\\Example.tsx:9:15\"\n});\nif (import.meta.hot) {\n  _$$refresh(\"vite\", import.meta.hot, _REGISTRY);\n  import.meta.hot.accept();\n}\n_$delegateEvents([\"click\"]);","start":1681089272945,"end":1681089272953,"order":"pre"},{"name":"vite:import-analysis","result":"import { createHotContext as __vite__createHotContext } from \"/@vite/client\";import.meta.hot = __vite__createHotContext(\"/src/components/Example.tsx\");import { $$clone as _$$clone } from \"/@fs/D:/Files/Github/thaler/packages/thaler/dist/esm/development/client.mjs\";\nimport { $$register as _$$register } from \"/@fs/D:/Files/Github/thaler/packages/thaler/dist/esm/development/client.mjs\";\nimport { template as _$template } from \"/node_modules/.vite/deps/solid-js_web.js?v=9590c33f\";\nimport { delegateEvents as _$delegateEvents } from \"/node_modules/.vite/deps/solid-js_web.js?v=9590c33f\";\nimport { createComponent as _$createComponent } from \"/node_modules/.vite/deps/solid-js_web.js?v=9590c33f\";\nimport { getNextElement as _$getNextElement } from \"/node_modules/.vite/deps/solid-js_web.js?v=9590c33f\";\nimport { runHydrationEvents as _$runHydrationEvents } from \"/node_modules/.vite/deps/solid-js_web.js?v=9590c33f\";\nimport { insert as _$insert } from \"/node_modules/.vite/deps/solid-js_web.js?v=9590c33f\";\nimport { $$component as _$$component } from \"/@solid-refresh\";\nimport { $$refresh as _$$refresh } from \"/@solid-refresh\";\nimport { $$registry as _$$registry } from \"/@solid-refresh\";\nconst _REGISTRY = _$$registry();\nconst _tmpl$ = /*#__PURE__*/_$template(`<button>`),\n  _tmpl$2 = /*#__PURE__*/_$template(`<h1>`),\n  _tmpl$3 = /*#__PURE__*/_$template(`<div>`),\n  _tmpl$4 = /*#__PURE__*/_$template(`<h1>Loading`);\nimport { createResource, createSignal, Suspense } from '/node_modules/.vite/deps/solid-js.js?v=9590c33f';\nimport { fn$ } from '/@fs/D:/Files/Github/thaler/packages/thaler/dist/esm/development/index.mjs';\nimport { debounce } from '/@fs/D:/Files/Github/thaler/packages/thaler/dist/esm/development/utils.mjs';\nconst sleep = ms => new Promise(res => {\n  setTimeout(res, ms, true);\n});\nconst _fn = _$$register(\"fn\", \"http://localhost:5173/api/__thaler/11d62f5d-0\");\nexport default _$$component(_REGISTRY, \"Example\", function Example() {\n  const [state, setState] = createSignal(0);\n  const prefix = 'Server Count';\n  const serverCount = debounce(_$$clone(_fn, () => [prefix]), {\n    key: () => 'sleep'\n  });\n  const [data] = createResource(state, value => serverCount(value));\n  function increment() {\n    setState(c => c + 1);\n  }\n  return [(() => {\n    const _el$ = _$getNextElement(_tmpl$);\n    _el$.$$click = increment;\n    _$insert(_el$, () => `Client Count: ${state()}`);\n    _$runHydrationEvents();\n    return _el$;\n  })(), (() => {\n    const _el$2 = _$getNextElement(_tmpl$3);\n    _$insert(_el$2, _$createComponent(Suspense, {\n      get fallback() {\n        return _$getNextElement(_tmpl$4);\n      },\n      get children() {\n        const _el$3 = _$getNextElement(_tmpl$2);\n        _$insert(_el$3, data);\n        return _el$3;\n      }\n    }));\n    return _el$2;\n  })()];\n}, {\n  location: \"src\\\\components\\\\Example.tsx:9:15\"\n});\nif (import.meta.hot) {\n  _$$refresh(\"vite\", import.meta.hot, _REGISTRY);\n  import.meta.hot.accept();\n}\n_$delegateEvents([\"click\"]);","start":1681089272953,"end":1681089272979,"order":"normal"}]}
