{"resolvedId":"D:/Files/Github/thaler/packages/thaler/dist/esm/development/utils.mjs","transforms":[{"name":"__load__","result":"// utils/index.ts\nfunction json(data, init = {}) {\n  return new Response(JSON.stringify(data), {\n    status: 200,\n    ...init,\n    headers: {\n      ...init.headers,\n      \"Content-Type\": \"application/json\"\n    }\n  });\n}\nfunction text(data, init = {}) {\n  return new Response(data, {\n    status: 200,\n    ...init,\n    headers: {\n      ...init.headers,\n      \"Content-Type\": \"text/plain\"\n    }\n  });\n}\nfunction createDeferred() {\n  let resolve;\n  let reject;\n  return {\n    promise: new Promise((res, rej) => {\n      resolve = res;\n      reject = rej;\n    }),\n    resolve(value) {\n      resolve(value);\n    },\n    reject(value) {\n      reject(value);\n    }\n  };\n}\nvar DEFAULT_DEBOUNCE_TIMEOUT = 250;\nfunction debounce(callback, options) {\n  const cache = /* @__PURE__ */ new Map();\n  function resolveData(current, key, args) {\n    try {\n      callback.apply(callback, args).then(\n        (value) => {\n          current.deferred.resolve(value);\n          cache.delete(key);\n        },\n        (value) => {\n          current.deferred.reject(value);\n          cache.delete(key);\n        }\n      );\n    } catch (err) {\n      current.deferred.reject(err);\n      cache.delete(key);\n    }\n  }\n  return (...args) => {\n    const key = options.key(...args);\n    const current = cache.get(key);\n    if (current) {\n      clearTimeout(current.timeout);\n      current.timeout = setTimeout(\n        () => resolveData(current, key, args),\n        options.timeout || DEFAULT_DEBOUNCE_TIMEOUT\n      );\n      return current.deferred.promise;\n    }\n    const record = {\n      deferred: createDeferred(),\n      timeout: setTimeout(\n        () => resolveData(record, key, args),\n        options.timeout || DEFAULT_DEBOUNCE_TIMEOUT\n      )\n    };\n    cache.set(key, record);\n    return record.deferred.promise;\n  };\n}\nfunction throttle(callback, options) {\n  const cache = /* @__PURE__ */ new Map();\n  function resolveData(current, key, args) {\n    try {\n      callback.apply(callback, args).then(\n        (value) => {\n          current.deferred.resolve(value);\n          cache.delete(key);\n        },\n        (value) => {\n          current.deferred.reject(value);\n          cache.delete(key);\n        }\n      );\n    } catch (err) {\n      current.deferred.reject(err);\n      cache.delete(key);\n    }\n  }\n  return (...args) => {\n    const key = options.key(...args);\n    const current = cache.get(key);\n    if (current) {\n      return current.deferred.promise;\n    }\n    const record = {\n      deferred: createDeferred()\n    };\n    cache.set(key, record);\n    resolveData(record, key, args);\n    return record.deferred.promise;\n  };\n}\nexport {\n  debounce,\n  json,\n  text,\n  throttle\n};\n                                  \n","start":1681089273000,"end":1681089273000},{"name":"vite:import-analysis","result":"// utils/index.ts\nfunction json(data, init = {}) {\n  return new Response(JSON.stringify(data), {\n    status: 200,\n    ...init,\n    headers: {\n      ...init.headers,\n      \"Content-Type\": \"application/json\"\n    }\n  });\n}\nfunction text(data, init = {}) {\n  return new Response(data, {\n    status: 200,\n    ...init,\n    headers: {\n      ...init.headers,\n      \"Content-Type\": \"text/plain\"\n    }\n  });\n}\nfunction createDeferred() {\n  let resolve;\n  let reject;\n  return {\n    promise: new Promise((res, rej) => {\n      resolve = res;\n      reject = rej;\n    }),\n    resolve(value) {\n      resolve(value);\n    },\n    reject(value) {\n      reject(value);\n    }\n  };\n}\nvar DEFAULT_DEBOUNCE_TIMEOUT = 250;\nfunction debounce(callback, options) {\n  const cache = /* @__PURE__ */ new Map();\n  function resolveData(current, key, args) {\n    try {\n      callback.apply(callback, args).then(\n        (value) => {\n          current.deferred.resolve(value);\n          cache.delete(key);\n        },\n        (value) => {\n          current.deferred.reject(value);\n          cache.delete(key);\n        }\n      );\n    } catch (err) {\n      current.deferred.reject(err);\n      cache.delete(key);\n    }\n  }\n  return (...args) => {\n    const key = options.key(...args);\n    const current = cache.get(key);\n    if (current) {\n      clearTimeout(current.timeout);\n      current.timeout = setTimeout(\n        () => resolveData(current, key, args),\n        options.timeout || DEFAULT_DEBOUNCE_TIMEOUT\n      );\n      return current.deferred.promise;\n    }\n    const record = {\n      deferred: createDeferred(),\n      timeout: setTimeout(\n        () => resolveData(record, key, args),\n        options.timeout || DEFAULT_DEBOUNCE_TIMEOUT\n      )\n    };\n    cache.set(key, record);\n    return record.deferred.promise;\n  };\n}\nfunction throttle(callback, options) {\n  const cache = /* @__PURE__ */ new Map();\n  function resolveData(current, key, args) {\n    try {\n      callback.apply(callback, args).then(\n        (value) => {\n          current.deferred.resolve(value);\n          cache.delete(key);\n        },\n        (value) => {\n          current.deferred.reject(value);\n          cache.delete(key);\n        }\n      );\n    } catch (err) {\n      current.deferred.reject(err);\n      cache.delete(key);\n    }\n  }\n  return (...args) => {\n    const key = options.key(...args);\n    const current = cache.get(key);\n    if (current) {\n      return current.deferred.promise;\n    }\n    const record = {\n      deferred: createDeferred()\n    };\n    cache.set(key, record);\n    resolveData(record, key, args);\n    return record.deferred.promise;\n  };\n}\nexport {\n  debounce,\n  json,\n  text,\n  throttle\n};\n                                  \n","start":1681089273000,"end":1681089273000,"order":"normal"}]}
